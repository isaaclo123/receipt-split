{"version":3,"sources":["reducers/loginReducer.tsx","reducers/receiptReducer.tsx","reducers/receiptListReducer.tsx","reducers/userReducer.tsx","reducers/rootReducer.tsx","api/index.tsx","sagas/loginSaga.tsx","sagas/signupSaga.tsx","sagas/receiptListSaga.tsx","sagas/receiptSaga.tsx","sagas/userSaga.tsx","sagas/saveReceiptSaga.tsx","serviceWorker.js","components/PrivateRoute.tsx","components/NavComponent.tsx","actions/getUser.tsx","components/BalanceListItemComponent.tsx","components/TakeListItemComponent.tsx","components/LeaveListItemComponent.tsx","components/BalancePage.tsx","actions/getReceipt.tsx","components/ReceiptListItemComponent.tsx","components/ReceiptPage.tsx","types/index.tsx","components/UserSelectModal.tsx","components/BadgeListComponent.tsx","components/TextInputComponent.tsx","components/ExpenseCardComponent.tsx","components/ReceiptEditPage.tsx","actions/setReceipt.tsx","actions/saveReceipt.tsx","components/PeoplePage.tsx","components/App.tsx","components/LoginPage.tsx","actions/setLogin.tsx","components/SignupPage.tsx","actions/setSignup.tsx","index.tsx","store.tsx"],"names":["initialState","username","login","token","receipt","receipts","user","rootReducer","combineReducers","loginState","state","action","payload","type","console","log","receiptListState","userState","receiptState","fetchLogin","myloginData","a","loginData","fetch","method","mode","headers","body","JSON","stringify","response","json","fetchSignup","mySignupData","signupData","fetchReceiptList","saveReceiptById","id","receiptData","fetchReceiptById","fetchUser","addUser","fetchLoginWorker","loginSaga","call","tokenData","tokenPayload","access_token","put","takeLatest","fetchSignupWorker","signupSaga","signupPayload","password","loginPayload","fetchReceiptListWorker","receiptListSaga","getToken","select","receiptListData","receiptListPayload","fetchReceiptWorker","receiptSaga","receiptPayload","fetchUserWorker","userSaga","userData","userPayload","saveReceiptWorker","saveReceiptSaga","Boolean","window","location","hostname","match","connector","connect","props","to","rest","NavComponent","Navbar","variant","bg","Brand","Collapse","Nav","className","url","Link","getUser","dispatch","BalanceListItemComponent","prefix","amount","name","descriptor","handleClick","buttons","active","ListGroup","Item","style","lineHeight","toFixed","onClick","ButtonGroup","size","map","text","Button","disabled","TakeListItemComponent","pending","handleNameClick","balanceProps","handleAcceptClick","handleRejectClick","LeaveListItemComponent","handlePayClick","useState","run","setRun","friends","fullname","balances_to_user","balances_from_user","length","from_user","to_user","getReceiptList","getReceipt","ReceiptListItemComponent","handleViewClick","redirect","setRedirect","receiptEdit","date","key","ReceiptItemTypeDefault","users","UserSelectModal","show","onHide","title","onUserSelect","Modal","aria-labelledby","centered","Header","borderBottom","Title","Footer","borderTop","BadgeListComponent","items","handleItemClick","handleDeleteClick","handleAddClick","item","index","Badge","pill","TextInputComponent","handleTextChange","value","pattern","handleValidate","str","hideInput","setHideInput","display","onChange","event","currentTarget","onKeyPress","onBlur","ExpenseCardComponent","handleNameChange","handleAmountChange","handleUserClick","handleDeleteUserClick","handleAddUserClick","extraComponent","Card","Body","Number","isNaN","Subtitle","Text","people","concat","setReceipt","saveReceipt","blankUserList","addedusers","modalcallback","modalState","setModalState","receipt_id","params","list1","list2","balances","receipt_items","removeIndex","list","filter","_","i","insertIndex","newItem","insertAt","slice","j","onSave","alert","deleteAt","removebadgeuser","friendText","setFriendText","error","setError","hide","setHide","addFriend","result","closeButton","InputGroup","FormControl","aria-describedby","isInvalid","Append","Form","Control","Feedback","path","component","BalancePage","ReceiptEditPage","ReceiptPage","PeoplePage","setLogin","Group","controlId","Label","placeholder","signupState","setSignup","ReactDOM","render","store","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","thunk","configureStore","exact","Login","Signup","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31bc60f9.chunk.js","sourcesContent":["import {\n  // LoginData,\n  LoginAction,\n  TokenData,\n  LoginState\n} from '../types/index'\n\nconst initialState: LoginState = {\n  username: \"\",\n  login: false,\n  token: null\n}\n\nexport default (state:LoginState = initialState, action: LoginAction) => {\n  const { payload = null, type } = action\n\n  if (payload == null) {\n    return state\n  }\n\n  // const { username, password }: LoginData = action.payload\n\n  // alert(username)\n  // console.log(username)\n  // console.log(password)\n\n  switch (type) {\n    case 'LOGIN_SUCCESS':\n      console.log(\"SUCCESS\")\n      const { username, token = \"\" }: TokenData = payload\n\n      if (token === \"\") {\n        return {\n          username,\n          login: false,\n          token: null\n        }\n      }\n\n      return {\n        username,\n        login: true,\n        token\n      }\n    case 'LOGIN_FAIL':\n      console.log(\"FAIL\")\n      return {\n        username: payload.username,\n        login: false,\n        token: null\n      }\n    default:\n      return state;\n  }\n}\n","import {\n  ReceiptData,\n  ReceiptAction,\n  ReceiptState,\n} from '../types/index'\n\nexport const initialReceipt = {\n  \"date\": \"2019-03-02\",\n  \"receipt_items\": [],\n  \"users\": [],\n  \"amount\": 0,\n  \"balances\": [],\n  \"user\": {\n    \"username\": \"test\",\n    \"id\": 1,\n    \"fullname\": \"isaac lo\"\n  },\n  \"name\": \"New Receipt\"\n}\n\nconst initialState: ReceiptState = {\n  receipt: null,\n}\n\nexport default (state:ReceiptState = initialState, {\n  payload,\n  type\n}: ReceiptAction) => {\n  if (payload == null) {\n    return state\n  }\n\n  // alert(username)\n  // console.log(username)\n  // console.log(password)\n\n  switch (type) {\n    case 'RECEIPT_SAVE_SUCCESS':\n      return payload\n    case 'RECEIPT_SAVE_FAIL':\n      return state\n\n    case 'RECEIPT_SET':\n      console.log(\"RECEIPTSET\")\n      console.log(payload)\n      return payload\n    case 'RECEIPT_ID_SUCCESS':\n      return payload\n    case 'RECEIPT_ID_FAIL':\n      return payload\n    default:\n      return state;\n  }\n}\n","import {\n  ReceiptData,\n  ReceiptAction,\n  ReceiptType,\n  ReceiptListState,\n  ReceiptListAction,\n} from '../types/index'\n\nconst initialState: ReceiptListState = {\n  receipts: []\n}\n\nexport default (state:ReceiptListState = initialState, {\n  payload,\n  type\n}: ReceiptListAction) => {\n  if (payload == null) {\n    return state\n  }\n\n  console.log(\"RECIPET_LIST_PAYLOAD\")\n  console.log(payload)\n  console.log(\"RECIPET_LIST_PAYLOAD\")\n\n  switch (type) {\n    case 'RECEIPT_LIST_SUCCESS':\n      return payload\n    case 'RECEIPT_LIST_FAIL':\n      return state\n    default:\n      return state\n  }\n}\n","import {\n  UserType,\n  UserAction,\n  UserRequestAction,\n  UserState,\n} from '../types/index'\n\nconst initialState: UserState = {\n  user: null,\n}\n\nexport default (state:UserState = initialState, {\n  payload,\n  type\n}: UserAction) => {\n  if (payload == null) {\n    return state\n  }\n\n  const { user }: UserState = payload\n  console.log(payload)\n\n  // alert(username)\n  // console.log(username)\n  // console.log(password)\n\n  switch (type) {\n    case 'USER_INFO_SUCCESS':\n      return payload\n    case 'USER_INFO_FAIL':\n      return payload\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport loginReducer from './loginReducer';\nimport receiptReducer from './receiptReducer';\nimport receiptListReducer from './receiptListReducer';\nimport userReducer from './userReducer';\n\nexport const rootReducer = combineReducers({\n  loginState: loginReducer,\n  receiptListState: receiptListReducer,\n  userState: userReducer,\n  receiptState: receiptReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import {\n  LoginData,\n  SignupData,\n  ReceiptData\n} from '../types/index'\n\nconst SERVER_URL = ``\n\nexport const fetchLogin = async (myloginData: any) => {\n  try {\n    const loginData: LoginData = myloginData\n    const response = await fetch(`${SERVER_URL}/auth`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\nexport const fetchSignup = async (mySignupData: any) => {\n  try {\n    const signupData: SignupData = mySignupData\n    const response = await fetch(`${SERVER_URL}/signup`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(signupData)\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\n\nexport const fetchReceiptList = async (token: any) => {\n  try {\n    const response = await fetch(`${SERVER_URL}/receipt`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${token}`,\n      }\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\n\nexport const saveReceiptById = async (token: any, id: number, receiptData: any) => {\n  try {\n    const response = await fetch(`${SERVER_URL}/receipt/${id}`, {\n      method: 'PUT',\n      // credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${token}`,\n      },\n      body: JSON.stringify(receiptData)\n    })\n    console.log(response)\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\nexport const fetchReceiptById = async (token: any, id: number, ) => {\n  try {\n    const response = await fetch(`${SERVER_URL}/receipt/${id}`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${token}`,\n      }\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\nexport const fetchUser = async (token: any) => {\n  try {\n    const response = await fetch(`${SERVER_URL}/user`, {\n      method: 'GET',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${token}`,\n      }\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n\nexport const addUser = async (token: any, username: string) => {\n  try {\n    const response = await fetch(`${SERVER_URL}/friend/${username}`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${token}`,\n      }\n    })\n\n    const json = await response.json()\n    return json\n  } catch (e) {\n    return null\n  }\n}\n","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport { fetchLogin } from '../api/index'\n\nimport { TokenData, LoginAction } from '../types/index'\n\nfunction* fetchLoginWorker(action: LoginAction) {\n  try {\n      const { payload } = action\n\n      const tokenData = yield call(fetchLogin, payload);\n\n      const { username } = payload\n\n      const tokenPayload: TokenData = {\n        username,\n        token: tokenData.access_token\n      }\n\n      console.log(\"LOGIN_SUCCESS\")\n      console.log(payload)\n\n      yield put({type: \"LOGIN_SUCCESS\", payload: tokenPayload});\n  } catch (e) {\n      yield put({type: \"LOGIN_FAIL\", token: \"\"});\n  }\n}\n\nexport function* loginSaga() {\n  yield takeLatest(\"LOGIN_REQUEST\", fetchLoginWorker);\n}\n","import { call, put, takeLatest } from 'redux-saga/effects'\n\nimport { fetchLogin, fetchSignup } from '../api/index'\n\nimport { TokenData, LoginData, SignupData, SignupAction } from '../types/index'\n\nfunction* fetchSignupWorker(action: SignupAction) {\n  const { payload } = action\n  const signupPayload: SignupData = payload\n\n  try {\n      const signupData = yield call(fetchSignup, payload);\n\n      if (signupData == null) {\n        yield put({type: \"SIGNUP_FAIL\", payload: signupPayload});\n      }\n\n      const { username, password } = signupPayload\n\n      const loginPayload: LoginData = {\n        username,\n        password\n      }\n\n      const tokenData = yield call(fetchLogin, loginPayload);\n\n      console.log(tokenData)\n\n      const tokenPayload: TokenData = {\n        username,\n        token: tokenData.access_token\n      }\n\n      yield put({type: \"LOGIN_SUCCESS\", payload: tokenPayload});\n  } catch (e) {\n      yield put({type: \"SIGNUP_FAIL\", payload: signupPayload});\n  }\n}\n\nexport function* signupSaga() {\n  yield takeLatest(\"SIGNUP_REQUEST\", fetchSignupWorker);\n}\n","import { select, call, put, takeLatest } from 'redux-saga/effects'\n\nimport { fetchReceiptList } from '../api/index'\n\nimport { ReceiptListState, ReceiptType } from '../types/index'\n\nconst getToken = (state:any) => state.loginState.token\n\nfunction* fetchReceiptListWorker(action: any) {\n  console.log(\"FETCHRECEIPTLISTWORKER\")\n  try {\n      const token = yield select(getToken);\n\n      const receiptListData: ReceiptType[] = yield call(fetchReceiptList, token);\n      console.log(\"receiptListData\")\n      console.log(receiptListData)\n\n      const receiptListPayload: ReceiptListState = {\n        receipts: receiptListData\n      }\n\n      yield put({type: \"RECEIPT_LIST_SUCCESS\", payload: receiptListPayload});\n  } catch (e) {\n      const receiptListPayload: ReceiptListState = {\n        receipts: []\n      }\n\n      yield put({type: \"RECEIPT_LIST_FAIL\", payload: receiptListPayload});\n  }\n}\n\nexport function* receiptListSaga() {\n  yield takeLatest(\"RECEIPT_LIST_REQUEST\", fetchReceiptListWorker);\n}\n","import { select, call, put, takeLatest } from 'redux-saga/effects'\n\nimport { fetchReceiptById } from '../api/index'\n\nimport { ReceiptData, ReceiptType, ReceiptState, ReceiptRequestAction } from '../types/index'\n\nconst getToken = (state:any) => state.loginState.token\n\nfunction* fetchReceiptWorker(action: any) {\n  const { payload }: ReceiptRequestAction = action\n  const { id=-1 }: ReceiptData = payload\n  try {\n      const token = yield select(getToken);\n\n      const receiptData: ReceiptType = yield call(fetchReceiptById, token, id);\n\n      const receiptPayload: ReceiptState = {\n        receipt: receiptData\n      }\n\n      yield put({type: \"RECEIPT_ID_SUCCESS\", payload: receiptPayload});\n  } catch (e) {\n      const receiptPayload: ReceiptState = {\n        receipt: null\n      }\n\n      yield put({type: \"RECEIPT_ID_FAIL\", payload: receiptPayload});\n  }\n}\n\nexport function* receiptSaga() {\n  yield takeLatest(\"RECEIPT_ID_REQUEST\", fetchReceiptWorker);\n}\n","import { select, call, put, takeLatest } from 'redux-saga/effects'\n\nimport { fetchUser } from '../api/index'\n\nimport { UserRequestAction, UserType, UserState } from '../types/index'\n\nconst getToken = (state:any) => state.loginState.token\n\nfunction* fetchUserWorker(action: any) {\n  console.log('GETUSER ETCH')\n  try {\n      const token = yield select(getToken);\n\n      console.log('BEFORE FETCHUSER')\n      const userData: UserType = yield call(fetchUser, token);\n\n      console.log(userData)\n      console.log('AFTER FETCHUSER')\n\n      const userPayload: UserState = {\n        user: userData\n      }\n      console.log(userPayload)\n\n      yield put({type: \"USER_INFO_SUCCESS\", payload: userPayload});\n  } catch (e) {\n      const userPayload: UserState = {\n        user: null\n      }\n\n      yield put({type: \"USER_INFO_FAIL\", payload: userPayload});\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(\"USER_INFO_REQUEST\", fetchUserWorker);\n}\n","import { select, call, put, takeLatest } from 'redux-saga/effects'\n\nimport { saveReceiptById } from '../api/index'\n\nimport { ReceiptType, ReceiptState, ReceiptSetAction } from '../types/index'\n\nconst getToken = (state:any) => state.loginState.token\n\nfunction* saveReceiptWorker(action: any) {\n  const { payload }: ReceiptSetAction = action\n  const { id=-1 }: ReceiptType = payload\n  try {\n      const token = yield select(getToken);\n\n      const receiptData: ReceiptType = yield call(saveReceiptById, token, id, payload);\n\n      const receiptPayload: ReceiptState = {\n        receipt: receiptData\n      }\n\n      yield put({type: \"RECEIPT_SAVE_SUCCESS\", payload: receiptPayload});\n  } catch (e) {\n      const receiptPayload: ReceiptState = {\n        receipt: null\n      }\n\n      yield put({type: \"RECEIPT_SAVE_FAIL\", payload: receiptPayload});\n  }\n}\n\nexport function* saveReceiptSaga() {\n  yield takeLatest(\"RECEIPT_SAVE_REQUEST\", saveReceiptWorker);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { LoginState } from '../types/index'\n\nimport {\n  Route,\n  Redirect,\n  RouteProps,\n} from 'react-router-dom'\n\nconst mapStateToProps = (state: LoginState) => {\n  return state\n}\n\nconst connector = connect(\n  mapStateToProps,\n  {}\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & RouteProps & {\n  loginState?: LoginState\n}\n\nconst PrivateRoute = (props: Props) => {\n  console.log(props)\n\n  if (props.loginState == null || props.loginState.login === false) {\n    return <Redirect to='/login' />\n  }\n\n  const { loginState, ...rest } = props\n\n  return <Route {...rest}/>\n}\n\nexport default connector(PrivateRoute)\n","import React from 'react'\n\nimport {\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport Nav from 'react-bootstrap/Nav'\nimport Navbar from 'react-bootstrap/Navbar'\n\nconst NavComponent = (props: RouteComponentProps<{}>) => {\n  const { match } = props\n\n  return (\n    <Navbar variant=\"dark\" bg=\"dark\">\n      <Navbar.Brand>\n        Receipt Split App\n      </Navbar.Brand>\n\n      <Navbar.Collapse>\n\n        <Nav className=\"mr-auto\" />\n\n        <Nav>\n          <LinkContainer to={`${match.url}/balances`}>\n            <Nav.Link>Balances</Nav.Link>\n          </LinkContainer>\n\n          <LinkContainer to={`${match.url}/receipts`}>\n            <Nav.Link>Receipts</Nav.Link>\n          </LinkContainer>\n\n          <LinkContainer to={`${match.url}/people`}>\n            <Nav.Link>People</Nav.Link>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default NavComponent\n","import { Dispatch } from 'redux';\n\nimport {\n  UserRequestAction\n} from '../types/index'\n\nexport const getUser = () => (dispatch: Dispatch) => {\n  const action: UserRequestAction = {\n    type: 'USER_INFO_REQUEST',\n  }\n\n  console.log('GETUSER')\n\n  dispatch(action)\n}\n","import React from 'react'\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\n\nimport { ButtonProps } from '../types/index';\n\nexport interface BalanceProps {\n  prefix: string;\n  amount: number;\n\n  variant: string;\n  descriptor: string;\n\n  name: string;\n  handleClick: () => void;\n\n  buttons: ButtonProps[];\n\n  active: boolean;\n}\n\nexport const BalanceListItemComponent = ({\n  prefix,\n  amount,\n  variant,\n  name,\n  descriptor,\n  handleClick,\n  buttons,\n  active\n}: BalanceProps) => {\n  return (\n    <ListGroup.Item style={{\n        lineHeight: \"2rem\"\n      }}>\n\n      <span>\n        <span className={`text-${variant}`}>{prefix}${amount.toFixed(2)}</span>\n        &nbsp;{descriptor}&nbsp;\n        <span className=\"text-primary\" onClick={() => handleClick()}>\n          {name}\n        </span>\n      </span>\n\n      <span className=\"text-danger float-right\">\n        <ButtonGroup size=\"sm\">\n          {buttons.map(({ variant, text, handleClick}: ButtonProps) => {\n            return active ? (\n              <Button\n                className={`btn btn-${variant}`}\n                onClick={() => handleClick()}\n                active>\n                {text}\n              </Button>\n              ) : (\n              <Button\n                className={`btn btn-${variant}`}\n                onClick={() => handleClick()}\n                disabled>\n                {text}\n              </Button>\n              )\n          })\n        }\n        </ButtonGroup>\n      </span>\n    </ListGroup.Item>\n  )\n}\n","import React from 'react'\n\nimport {\n  BalanceProps,\n  BalanceListItemComponent\n} from './BalanceListItemComponent';\n\nimport {\n  ButtonProps\n} from '../types/index'\n\nexport interface TakeProps {\n  amount: number,\n  name: string,\n  pending: boolean,\n  handleNameClick: () => void,\n  handleAcceptClick: () => void,\n  handleRejectClick: () => void,\n}\n\nexport const TakeListItemComponent = ({\n  amount,\n  name,\n  pending,\n\n  handleNameClick,\n  handleAcceptClick,\n  handleRejectClick,\n}: TakeProps) => {\n  // const buttons: ButtonProps[] = [\n  //   {\n  //     variant: \"success\",\n  //     text: \"ACCEPT\",\n  //     handleClick: handleAcceptClick\n  //   }, {\n  //     variant: \"danger\",\n  //     text: \"REJECT\",\n  //     handleClick: handleRejectClick\n  //   },\n  // ]\n  const buttons: ButtonProps[] = []\n\n  const balanceProps: BalanceProps = {\n    prefix: \"+\",\n    variant: \"success\",\n    amount,\n    descriptor: \"from\",\n    name,\n    handleClick: handleNameClick,\n    buttons,\n    active: pending // TODO\n  }\n\n  return (\n    <BalanceListItemComponent\n      {...balanceProps}/>\n  )\n}\n","import React from 'react'\n\nimport {\n  BalanceProps,\n  BalanceListItemComponent\n} from './BalanceListItemComponent';\n\nimport {\n  ButtonProps\n} from '../types/index'\n\nexport interface LeaveProps {\n  amount: number,\n  name: string,\n  pending: boolean,\n  handleNameClick: () => void,\n  handlePayClick: () => void,\n}\n\nexport const LeaveListItemComponent = ({\n  amount,\n  name,\n  pending,\n\n  handleNameClick,\n  handlePayClick,\n}: LeaveProps) => {\n  // const buttons: ButtonProps[] = pending ? [{\n  //     variant: \"primary\",\n  //     text: \"MARK PAID\",\n  //     handleClick: handlePayClick\n  //   }] : [{\n  //     variant: \"secondary\",\n  //     text: \"PENDING\",\n  //     handleClick: handlePayClick\n\n  // }]\n  const buttons: ButtonProps[] = []\n\n  const balanceProps: BalanceProps = {\n    prefix: \"-\",\n    variant: \"danger\",\n    amount,\n    descriptor: \"to\",\n    name,\n    handleClick: handleNameClick,\n    buttons,\n    active: pending // TODO\n  }\n\n  return (\n    <BalanceListItemComponent\n      {...balanceProps}/>\n  )\n}\n","import React, {useState} from 'react'\n\nimport { connect, ConnectedProps } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\n\nimport { addUser } from '../api/index';\n\nimport {\n  Redirect,\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport { getUser } from '../actions/getUser'\nimport { BalanceType, UserType, UserState, LoginState } from '../types/index'\n\nimport { TakeProps, TakeListItemComponent } from './TakeListItemComponent'\nimport { LeaveProps, LeaveListItemComponent } from './LeaveListItemComponent'\n\nconst mapStateToProps = (state: any) => {\n  return state\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { getUser }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & RouteComponentProps<{}> & {\n  userState?: UserState\n  loginState?: LoginState\n}\n\nconst BalancePage = ({match, userState, getUser, loginState}: Props) => {\n  const [ run, setRun ] = useState(true)\n  // gets user info once\n  if (run) {\n    setRun(false)\n    getUser()\n  }\n\n  if (userState == null) {\n    return <Redirect to={'/app'} />\n  }\n\n  const { user } = userState\n\n  if (user == null) {\n    return (<div>loading</div>)\n  }\n\n  const { friends, username, fullname, balances_to_user, balances_from_user } = user\n\n  return (\n    <>\n      <h5>You are Owed</h5>\n\n      <ListGroup className=\"mb-3\">\n\n      {(balances_to_user == null || balances_to_user.length <= 0) &&\n        (<ListGroup.Item>\n          <span className=\"text-secondary\">\n            None\n          </span>\n        </ListGroup.Item>)\n      }\n\n      {balances_to_user.map(({\n          amount,\n          from_user\n        }: BalanceType) => {\n          if (from_user.id != null && from_user.id == userState.user.id) {\n            return (<></>)\n          }\n\n          const props: TakeProps = {\n            handleNameClick: () => {},\n            handleAcceptClick: () => {},\n            handleRejectClick: () => {},\n            amount,\n            name: (from_user.fullname == null) ? \"Unknown\" : from_user.fullname,\n            pending: true,\n          }\n          return (\n            <TakeListItemComponent\n              {...props}/>\n          )\n\n        })}\n      </ListGroup>\n\n\n      <h5>You Should Pay</h5>\n\n      <ListGroup className=\"mb-3\">\n\n      {(balances_from_user == null || balances_from_user.length <= 0) &&\n        (<ListGroup.Item>\n          <span className=\"text-secondary\">\n            None\n          </span>\n        </ListGroup.Item>)\n      }\n\n      {balances_from_user.map(({\n          amount,\n          to_user\n        }: BalanceType) => {\n          if (to_user.id != null && to_user.id == userState.user.id) {\n            return (<></>)\n          }\n\n          const props: LeaveProps = {\n            handleNameClick: () => {},\n            handlePayClick: () => {},\n            amount,\n            name: (to_user.fullname == null) ? \"Unknown\" : to_user.fullname,\n            pending: true,\n          }\n          return (\n            <LeaveListItemComponent\n              {...props}/>\n          )\n\n        })}\n      </ListGroup>\n    </>\n  )\n}\n\nexport default connector(BalancePage)\n\n          // if (to_user.id != null && to_user.id == userState.user.id) {\n          //   return (<></>)\n          // }\n          //\n          //\n          // if (from_user.id != null && from_user.id == userState.user.id) {\n          //   return (<></>)\n          // }\n","import { Dispatch } from 'redux';\n\nimport {\n  ReceiptRequestAction,\n  ReceiptData\n} from '../types/index'\n\n// export const setReceiptList = () => (dispatch: Dispatch) => {\n//   const action = {\n//     type: 'RECEIPT_LIST_REQUEST',\n//   }\n//\n//   console.log(\"GETRECEIPTLIST\")\n//\n//   dispatch(action)\n// }\n\nexport const getReceiptList = () => (dispatch: Dispatch) => {\n  const action = {\n    type: 'RECEIPT_LIST_REQUEST',\n  }\n\n  console.log(\"GETRECEIPTLIST\")\n\n  dispatch(action)\n}\n\nexport const getReceipt = (payload: ReceiptData) => (dispatch: Dispatch) => {\n  console.log(\"getReceipt\")\n  console.log(payload)\n  const action: ReceiptRequestAction = {\n    type: 'RECEIPT_ID_REQUEST',\n    payload\n  }\n\n  dispatch(action)\n}\n","import React from 'react'\n\nimport {\n  BalanceProps,\n  BalanceListItemComponent\n} from './BalanceListItemComponent';\n\nimport {\n  ButtonProps,\n} from '../types/index';\n\nexport interface ReceiptProps {\n  amount: number,\n  name: string,\n  pending: boolean,\n  handleNameClick: () => void,\n  handleViewClick: () => void,\n}\n\nexport const ReceiptListItemComponent = ({\n  amount,\n  name,\n  pending,\n\n  handleNameClick,\n  handleViewClick,\n}: ReceiptProps) => {\n  // const buttons: ButtonProps[] = pending ? [{\n  //     variant: \"success\",\n  //     text: \"RESOLVED\",\n  //     handleClick: handleViewClick\n  //   }] : [{\n  //     variant: \"danger\",\n  //     text: \"UNRESOLVED\",\n  //     handleClick: handleViewClick\n\n  // }]\n  const buttons: ButtonProps[] = []\n\n  const balanceProps: BalanceProps = {\n    prefix: \"*\",\n    variant: \"info\",\n    amount,\n    descriptor: \"at\",\n    name,\n    handleClick: handleNameClick,\n    buttons,\n    active: pending // TODO\n  }\n\n  return (\n    <BalanceListItemComponent\n      {...balanceProps}/>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { connect, ConnectedProps } from 'react-redux'\n// import { useHistory } from \"react-router-dom\";\n\nimport {\n  Redirect,\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport { getReceiptList } from '../actions/getReceipt'\nimport { ReceiptProps, ReceiptListItemComponent } from './ReceiptListItemComponent';\nimport { ReceiptType, ReceiptListState } from '../types/index'\n\nconst mapStateToProps = (state: ReceiptListState ) => {\n  return state\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { getReceiptList }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & RouteComponentProps<{}> & {\n  receiptListState?: ReceiptListState\n}\n\nconst ReceiptPage = ({match, receiptListState, getReceiptList}: Props) => {\n  const [ redirect, setRedirect ] = useState({\n    redirect: false,\n    id: -1,\n  })\n\n  const [ run, setRun ] = useState(true)\n\n  // gets user info once\n  if (run) {\n    setRun(false)\n    getReceiptList()\n  }\n\n  if (redirect.redirect) {\n    return <Redirect to={`${match.url}/edit/${redirect.id}`} />\n  }\n\n  if (receiptListState == null) {\n    return <Redirect to={'/app'} />\n  }\n\n  const receiptEdit = (id: number) => {\n    // console.log(`${match.url}/edit/${id}`)\n    // history.push(`${match.url}/edit/${id}`)\n    setRedirect({\n      redirect: true,\n      id\n    })\n  }\n\n  const { receipts } = receiptListState\n\n  return (\n    <>\n      <div className=\"align-middle\">\n        <h5 className=\"float-left\">My Receipts</h5>\n\n        <LinkContainer to={`${match.url}/edit/-1`}>\n          <span className=\"float-right text-primary\">+ New</span>\n        </LinkContainer>\n      </div>\n      <br />\n      <h5 />\n\n      <ListGroup className=\"mb-3\">\n        {(receipts == null || receipts.length <= 0) &&\n          (<ListGroup.Item>\n            <span className=\"text-secondary\">\n              None\n            </span>\n          </ListGroup.Item>)\n        }\n        {receipts.map(({\n          name=\"\",\n          amount=-1,\n          date=\"\",\n          id=-1,\n          }: ReceiptType) => {\n            console.log(`ID ${id}`)\n\n          const props: ReceiptProps = {\n            pending: true,\n            handleNameClick: () => {receiptEdit(id)},\n            handleViewClick: () => {receiptEdit(id)},\n            amount,\n            name\n          }\n          return (\n            <ReceiptListItemComponent\n              key={id}\n              {...props}/>\n          )\n        })}\n      </ListGroup>\n    </>\n  )\n}\n\nexport default connector(ReceiptPage)\n","// login\n\nexport interface LoginData {\n  username:string;\n  password:string;\n}\n\nexport interface TokenData {\n  username:string;\n  token?: string\n}\n\nexport interface LoginAction {\n  type: string;\n  payload: LoginData | TokenData;\n}\n\nexport interface LoginState {\n  username: string;\n  login: boolean;\n  token: string | null;\n}\n\n// signup\n//\nexport interface SignupData {\n  username:string;\n  fullname:string;\n  password:string;\n}\n\nexport interface SignupAction {\n  type: string;\n  payload: SignupData;\n}\n\nexport interface SignupState extends SignupData {\n  signed_up: boolean;\n}\n\n// set login\n\nexport interface ReceiptData {\n  id: number;\n}\n\nexport interface ReceiptRequestAction {\n  type: string;\n  payload: ReceiptData;\n}\n\nexport interface ReceiptSetAction {\n  type: string;\n  payload: ReceiptType;\n}\n\nexport interface ReceiptAction {\n  type: string;\n  payload: ReceiptState;\n}\n\n// receipt state\n\nexport interface ReceiptState {\n  receipt: ReceiptType | null\n}\n\n// export interface ReceiptItem {\n//   name: string;\n//   amount: number;\n//   users: UserType[];\n// }\n\n// export interface ReceiptState {\n//   name: string;\n//   amount: number;\n//   owner: string;\n//   users: UserType[];\n//   items: ReceiptItem[];\n// }\n\n// receipt list\nexport interface ReceiptListAction {\n  type: string;\n  payload: ReceiptListState;\n}\n\nexport interface ReceiptListState {\n  receipts: ReceiptType[]\n}\n\n// server types\n\nexport type ReceiptType = {\n  id?: number;\n  name: string;\n  amount: number;\n  date: string;\n  resolved?: boolean | null;\n  user_id?: number\n  user?: UserType; //TODO\n  users?: UserType[]; //TODO\n  balances?: BalanceType[]\n  receipt_items?: ReceiptItemType[]\n}\n\nexport type ReceiptItemType = {\n  id?: number;\n  name: string;\n  amount: number;\n  users?: UserType[]; //TODO\n  receipt_id?: number;\n  receipt?: ReceiptType\n}\n\nconst userListExample: UserType[] = []\n\nexport const ReceiptItemTypeDefault: ReceiptItemType = {\n  name: \"New Receipt Item\",\n  amount: 0,\n  users: userListExample\n}\n\nexport type UserType = {\n  id?: number;\n  friend_of_id?: number;\n  friends?: UserType[]\n\n  username: string\n  fullname?: string\n\n  receipts?: ReceiptType\n  receipt_items?: number;\n}\n\nexport interface UserRequestAction {\n  type: string;\n}\n\nexport interface UserAction {\n  type: string;\n  payload: UserState | null;\n}\n\nexport interface UserState {\n  user: UserType | null\n}\n\nexport type BalanceType = {\n  id?: number;\n  to_user: UserType;\n  from_user: UserType;\n  to_user_id?: number;\n  from_user_id?: number;\n  amount: number;\n  receipt?: ReceiptType;\n}\n\nexport type PaymentType = {\n  id?: number;\n  created?: string;\n  accepted?: boolean;\n  message?: string;\n\n  to_user_id?: number;\n  from_user_id?: number;\n\n  amount: number;\n\n  to_user: UserType;\n  from_user: UserType;\n}\n\n// button\n\nexport interface ButtonProps {\n  variant: string;\n  text: string;\n  handleClick: () => void;\n}\n","import React from 'react';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport { UserType } from '../types/index'\n\nexport interface UserSelectProps {\n  show: boolean;\n  title: string;\n  onHide: () => void;\n  users: UserType[];\n  onUserSelect: (arg0: UserType) => void;\n}\n\nexport const UserSelectModal = ({\n  show,\n  onHide,\n  users,\n  title,\n  onUserSelect\n}: UserSelectProps) => {\n  return (\n    <Modal\n      show={show}\n      onHide={onHide}\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n    >\n      <Modal.Header style={{\n        borderBottom: 0\n      }}>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {title}\n        </Modal.Title>\n      </Modal.Header>\n        <ListGroup>\n          {(users == null || users.length <= 0) &&\n            (<ListGroup.Item>\n              <span className=\"text-secondary\">\n                None\n              </span>\n            </ListGroup.Item>)\n          }\n\n          {(users != null) && users.map((user: UserType) => {\n            const {\n              username=\"\",\n              fullname=\"\",\n              id=-1\n            } = user\n              return (<ListGroup.Item onClick={() => {onUserSelect(user); onHide()}}>\n                <span className=\"float-left\">\n                  {fullname}\n                </span>\n                <span className=\"float-right\">\n                  ({username})\n                </span>\n              </ListGroup.Item>)\n          })}\n        </ListGroup>\n          <Modal.Footer style={{\n            borderTop: 0\n          }}>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import React from 'react'\n\nimport Badge from 'react-bootstrap/Badge';\n\nimport './BadgeListComponent.css'\n\nexport interface BadgeListProps {\n  items: string[];\n  handleItemClick: (index: number) => void;\n  handleDeleteClick: (index: number) => void;\n  handleAddClick: () => void;\n}\n\nexport const BadgeListComponent = (props : BadgeListProps) => {\n  const {\n    items,\n    handleItemClick,\n    handleDeleteClick,\n    handleAddClick\n  } = props\n\n  if (items && items.length) {\n    return (\n      <>\n        {items.map((item, index: number) => {\n          return (\n            <>\n              <Badge\n                className=\"item-badge\"\n                variant=\"primary\"\n                pill>\n                <span\n                  onClick={() => handleItemClick(index)}>\n                  {item}\n                </span>\n\n                &nbsp;\n\n                <span\n                  onClick={() => handleDeleteClick(index)}\n                  className=\"item-badge-delete\">\n                  &times;\n                </span>\n              </Badge>\n            </>\n          )\n        })}\n        <Badge\n          onClick={() => handleAddClick()}\n          variant=\"primary\"\n          pill>\n          +\n        </Badge>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Badge variant=\"secondary\" pill>Nobody</Badge>\n      <Badge\n        onClick={() => handleAddClick()}\n        variant=\"secondary\"\n        pill>\n        +\n      </Badge>\n    </>\n  )\n}\n","import React, { useState } from 'react'\n\nexport interface TextInputProps {\n  value: string;\n  type?: string;\n  handleTextChange: (arg0: string) => void;\n  pattern?: string;\n  size?: number;\n  handleValidate?: (arg0: string) => boolean;\n}\n\nexport const TextInputComponent = ({\n    handleTextChange,\n    size=30,\n    type=\"text\",\n    value,\n    pattern = \"\",\n    handleValidate = (str: string) => true\n  }: TextInputProps) => {\n\n  const [ hideInput, setHideInput ] = useState(true)\n  // const [ newValue, setNewValue ] = useState(value)\n\n  // if (value !== newValue) {\n  //   setNewValue(value)\n  //   // setHideInput(true)\n  // }\n\n  // if (hideInput &&\n  //     value === \"\" &&\n  //     props.placeholderText != null &&\n  //     props.placeholderClass != null) {\n  //   return (\n  //     <span\n  //       onClick={() => {hideInput = false; alert(hideInput.toString())}}\n  //       className={props.placeholderClass}>\n  //       {props.placeholderText}\n  //     </span>\n  //   )\n  // }\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      setHideInput(true)\n    }\n  }\n\n  return (\n    <>\n      <span\n        onClick={() => {setHideInput(false)}}\n        style={{\n          display: hideInput ? \"inline\" : \"none\"\n        }}>\n        {value}\n      </span>\n\n      <input\n        size={size}\n        style={{\n          display: hideInput ? \"none\" : \"inline\"\n        }}\n        pattern={pattern}\n        value={value}\n        onChange={event => {\n          if (handleValidate(event.currentTarget.value)) {\n            handleTextChange(event.currentTarget.value)\n          }\n        }}\n        onKeyPress={handleKeyPress}\n        onBlur={()=>{setHideInput(true)}} />\n    </>\n  )\n}\n","import React from 'react'\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nimport { BadgeListProps, BadgeListComponent } from './BadgeListComponent'\nimport { UserType } from '../types/index'\n\nimport { TextInputComponent } from './TextInputComponent'\n\nexport interface ExpenseCardParams {\n  variant?: string;\n  prefix?: string;\n\n  name: string;\n  handleNameChange: (arg0:string) => void;\n\n  amount: number;\n  handleAmountChange: (arg0:number) => void;\n\n  handleDeleteClick: () => void;\n\n  users: UserType[];\n\n  handleUserClick: (arg0:number) => void;\n  handleDeleteUserClick: (arg0:number) => void;\n  handleAddUserClick: () => void;\n\n  extraComponent?: React.ReactNode;\n}\n\nexport const ExpenseCardComponent = ({\n  name,\n  handleNameChange,\n  amount = 0,\n  handleAmountChange,\n  users = [],\n\n  handleUserClick,\n  handleDeleteUserClick,\n  handleAddUserClick,\n\n  extraComponent = null,\n\n  variant = \"info\",\n  prefix = \"\",\n\n  handleDeleteClick\n}: ExpenseCardParams) => {\n\n  return (\n    <Card className=\"mb-3\">\n      <Card.Body>\n        <Card.Title>\n          <span className=\"float-left\">\n            <TextInputComponent\n              size={40}\n              type=\"text\"\n              value={name}\n              handleTextChange={handleNameChange}\n              />\n          </span>\n          <span\n            className={`text-${variant} float-right`}>\n            {prefix}$\n            <TextInputComponent\n              size={10}\n              type=\"number\"\n              value={(amount != null) ? amount.toFixed(2): \"0.00\"}\n              pattern=\"^(\\d*\\.)?\\d+$\"\n              handleValidate={(str: string) => {\n                // check greater than 0 and not invalid\n                const value = Number(str)\n                if (Number.isNaN(value)) return false\n                return value > 0\n              }}\n              handleTextChange={(str: string) => {\n                // to decimal number\n                const value = Number(Number(str).toFixed(2))\n                console.log(value)\n                handleAmountChange(value)\n              }}\n              />\n          </span>\n          <br />\n        </Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">\n        </Card.Subtitle>\n        <Card.Text>\n          {extraComponent}\n          <span className=\"float-left\">\n            <span className=\"align-middle\">\n              With&nbsp;\n            </span>\n\n            <BadgeListComponent\n              items={users.map((user: UserType) => {\n                const { fullname=\"\" } = user\n                return fullname\n              })}\n              handleItemClick={handleUserClick}\n              handleDeleteClick={handleDeleteUserClick}\n              handleAddClick={handleAddUserClick} />\n          </span>\n          <span className=\"float-right\">\n            <Button\n              variant=\"outline-light\"\n              className=\"close\"\n              onClick={handleDeleteClick}>\n              &times;\n            </Button>\n          </span>\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  )\n}\n","import React, { useState } from 'react';\n\nimport { connect, ConnectedProps } from 'react-redux'\n\nimport { getUser } from '../actions/getUser'\n\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\n\nimport {\n  Redirect,\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport { getReceipt } from '../actions/getReceipt'\nimport { setReceipt } from '../actions/setReceipt'\nimport { saveReceipt } from '../actions/saveReceipt'\n\nimport { ReceiptType, ReceiptItemType, ReceiptState, UserType, ReceiptItemTypeDefault, BalanceType } from '../types/index'\n\nimport { BadgeListProps, BadgeListComponent } from './BadgeListComponent';\n\nimport { UserSelectModal, UserSelectProps } from './UserSelectModal';\n\nimport { ExpenseCardComponent } from './ExpenseCardComponent'\n\nimport { TextInputComponent } from './TextInputComponent'\n\ntype MatchParams = {\n  id: string;\n}\n\nconst mapStateToProps = (state: any) => {\n  const { receiptState, userState } = state\n  return {\n    people: userState.user.friends.concat(userState.user),\n    receiptState,\n    userState\n  }\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { getReceipt, setReceipt, saveReceipt, getUser }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & RouteComponentProps<MatchParams> & {\n  receiptState?: ReceiptState\n}\n\n\nconst ReceiptEditPage = ({\n  match,\n  userState,\n  receiptState,\n  setReceipt,\n  saveReceipt,\n  getReceipt,\n  getUser,\n  people\n}: Props) => {\n  const [ run, setRun ] = useState(true)\n\n  const blankUserList: UserType[] = []\n\n  const [ modalState, setModalState ] = useState({\n    show: false,\n    addedusers: blankUserList,\n    modalcallback: (user: UserType) => {}\n  })\n\n  const {show, addedusers, modalcallback} = modalState\n\n  const receipt_id = Number(match.params.id) || -1\n\n  console.log(\"RECEIPTID\")\n  console.log(receipt_id)\n  console.log(\"RECEIPTID\")\n\n  if (run) {\n    getReceipt({id: receipt_id})\n    setRun(false)\n  }\n  console.log(receiptState)\n\n  if (receiptState == null || receiptState.receipt == null) {\n    return (<Redirect to={`${match.url}/receipts`} />)\n  }\n\n  const { receipt } = receiptState\n\n  const { id=-1, balances = [], name, amount, user, users = [], receipt_items = [], date }: ReceiptType = receipt\n\n  const onSave = () => {\n    const payload = {...receiptState.receipt, id}\n    console.log(\"PAYLOADkjyyp\")\n    console.log(payload)\n    console.log(\"PAYLOADkjyyp\")\n    saveReceipt(receiptState.receipt)\n    getUser()\n    console.log(\"GOT USER\")\n  }\n\n  const removeIndex = (list:UserType[], index:number) => {\n    return list.filter((_:UserType, i:number) => i !== index)\n  }\n\n  const listDiff = (list1:UserType[], list2:UserType[]) => {\n    return list1.filter((i) => {\n      for (let j = 0; j < list2.length; j++) {\n        if (i.id === list2[j].id) {\n          return false\n        }\n      }\n      return true\n    })\n  }\n\n  const insertIndex = (state:ReceiptItemType[], newItem:ReceiptItemType, insertAt:number) => {\n    return [\n      ...state.slice(0, insertAt),\n      newItem,\n      ...state.slice(insertAt+1)\n    ]\n  }\n\n  const deleteIndex = (state:ReceiptItemType[], deleteAt:number) => {\n    return [\n      ...state.slice(0, deleteAt),\n      ...state.slice(deleteAt+1)\n    ]\n  }\n\n  return (\n    <>\n      <UserSelectModal\n        show={show}\n        onHide={() => {\n          setModalState({\n            ...modalState,\n            show: false\n        })}}\n        users={listDiff(people, addedusers)}\n        title=\"Friends\"\n        onUserSelect={modalcallback} />\n\n      <div className=\"align-middle mb-3\">\n        <h5 className=\"float-left m-0 p-0\" style={{display: \"inline\", lineHeight: \"2rem\"}}>Receipt Info</h5>\n        <Button size=\"sm\" className=\"float-right\"\n          onClick={() => {\n            onSave()\n          }}>SAVE</Button>\n      </div>\n      <br />\n\n      <ExpenseCardComponent\n        extraComponent={\n          (<>\n            Paid by <span className=\"text-primary\">{ (user == null) ? \"Unknown\" : user.fullname }</span> on &nbsp;\n            <TextInputComponent\n              size={40}\n              type=\"text\"\n              value={date}\n              handleTextChange={(date:string) => {\n                setReceipt({\n                  ...receipt,\n                  date\n                })\n              }}\n              />\n            <br />\n          </>)\n        }\n        prefix=\"*\"\n        variant=\"info\"\n\n        name={name}\n        handleNameChange={(name:string) => {\n          setReceipt({\n            ...receipt,\n            name\n          })\n          console.log(name)\n        }}\n\n        amount={amount}\n        handleAmountChange={(amount:number) => {\n          setReceipt({\n            ...receipt,\n            amount\n          })\n        }}\n\n        handleDeleteClick={() => {alert(\"delete\")}}\n\n        users={users}\n        handleUserClick={() => {}}\n\n        handleDeleteUserClick={(i:number) => {\n          setReceipt({\n            ...receipt,\n            users: removeIndex(users, i)\n          })\n        }}\n\n        handleAddUserClick={() => {\n          setModalState({\n            show: true,\n            addedusers: users,\n            modalcallback: (user: UserType) => {\n              setReceipt({\n                ...receipt,\n                users: users.concat([user])\n              })\n            }\n          })\n        }}\n        />\n\n      <div className=\"align-middle\">\n        <h5 className=\"float-left\">Sub-expenses</h5>\n        <span\n          className=\"float-right text-primary\"\n          onClick={() => {\n            setReceipt({\n              ...receipt,\n              receipt_items: [ReceiptItemTypeDefault].concat(receipt_items)\n            })\n          }}>+ Add Item</span>\n      </div>\n      <br />\n      <h5 />\n\n      {(receipt_items == null || receipt_items.length <= 0) &&\n        (<Card className=\"mb-3\">\n          <Card.Body>\n            <Card.Title>\n              <span className=\"float-left text-secondary\">\n                None\n              </span>\n            </Card.Title>\n          </Card.Body>\n        </Card>)\n      }\n\n      {(receipt_items != null) && receipt_items.map(({\n          name, amount, users=blankUserList\n        }: ReceiptItemType, i:number) => {\n        return (<ExpenseCardComponent\n                  prefix=\"-\"\n                  variant=\"danger\"\n\n                  name={name}\n                  handleNameChange={(name:string) => {\n                    setReceipt({\n                      ...receipt,\n                      receipt_items: insertIndex(\n                        receipt_items,\n                        {\n                          ...receipt_items[i],\n                          name\n                        },\n                        i\n                      )\n                    })\n                  }}\n\n                  amount={amount}\n                  handleAmountChange={(amount:number) => {\n                    setReceipt({\n                      ...receipt,\n                      receipt_items: insertIndex(\n                        receipt_items,\n                        {\n                          ...receipt_items[i],\n                          amount\n                        },\n                        i\n                      )\n                    })\n                  }}\n\n                  users={users}\n\n                  handleDeleteClick={() => {\n                    setReceipt({\n                      ...receipt,\n                      receipt_items: deleteIndex(receipt_items, i)\n                    })\n                  }}\n\n                  handleUserClick={(i:number) => {}}\n\n                  handleDeleteUserClick={(i:number) => {\n                    const removebadgeuser:UserType[] = removeIndex(users, i)\n                    setReceipt({\n                      ...receipt,\n                      receipt_items: insertIndex(\n                        receipt_items, {\n                          ...receipt_items[i],\n                          users: removebadgeuser\n                        }, i)\n                      })\n                  }}\n\n                  handleAddUserClick={() => {\n                    setModalState({\n                      show: true,\n                      addedusers: users,\n                      modalcallback: (user: UserType) => {\n                        setReceipt({\n                          ...receipt,\n                          receipt_items: insertIndex(\n                            receipt_items,\n                            {\n                              ...receipt_items[i],\n                              users: users.concat([user])\n                            },\n                            i)\n                        })\n                      }\n                    })\n                  }}\n                  />)\n      })}\n\n      <h5>Balance</h5>\n\n      {(balances == null || balances === []) && <div>None</div>}\n\n      {balances.map(({\n          to_user,\n          from_user,\n          amount\n        }: BalanceType) => {\n        return (\n          <Card className=\"mb-3\">\n            <Card.Body>\n              <Card.Title>\n                <span className=\"float-left\">\n                  <span className=\"text-primary\">{ from_user.fullname }</span> pays <span className=\"text-primary\">{ to_user.fullname }</span>\n                </span>\n                <span className=\"text-info float-right\">${ (amount).toFixed(2) }</span>\n              </Card.Title>\n            </Card.Body>\n          </Card>\n        )\n      })}\n    </>\n  )\n}\n\nexport default connector(ReceiptEditPage)\n","import { Dispatch } from 'redux';\n\nimport {\n  ReceiptAction,\n  ReceiptType\n} from '../types/index'\n\n// export const setReceiptList = () => (dispatch: Dispatch) => {\n//   const action = {\n//     type: 'RECEIPT_LIST_REQUEST',\n//   }\n//\n//   console.log(\"GETRECEIPTLIST\")\n//\n//   dispatch(action)\n// }\n\nexport const setReceipt = (payload: ReceiptType) => (dispatch: Dispatch) => {\n  console.log(\"setReceipt\")\n  console.log(payload)\n  const action: ReceiptAction = {\n    type: 'RECEIPT_SET',\n    payload: {\n      receipt: payload\n    }\n  }\n\n  dispatch(action)\n}\n","import { Dispatch } from 'redux';\n\nimport {\n  ReceiptSetAction,\n  ReceiptType,\n} from '../types/index'\n\nexport const saveReceipt = (payload: ReceiptType) => (dispatch: Dispatch) => {\n  console.log(\"saveReceipt\")\n  console.log(payload)\n  const action: ReceiptSetAction = {\n    type: 'RECEIPT_SAVE_REQUEST',\n    payload\n  }\n\n  dispatch(action)\n}\n","import React, {useState} from 'react'\n\nimport { connect, ConnectedProps } from 'react-redux'\nimport { useHistory } from \"react-router-dom\";\n\nimport { addUser } from '../api/index';\n\nimport {\n  Redirect,\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nimport { getUser } from '../actions/getUser'\nimport { ReceiptProps, ReceiptListItemComponent } from './ReceiptListItemComponent';\nimport { UserType, UserState, LoginState } from '../types/index'\n\nconst mapStateToProps = (state: any) => {\n  return state\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { getUser }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & RouteComponentProps<{}> & {\n  userState?: UserState\n  loginState?: LoginState\n}\n\nconst PeoplePage = ({match, userState, getUser, loginState}: Props) => {\n  const [ friendText, setFriendText ] = useState(\"\")\n  const [ error, setError ] = useState(\"\")\n\n  const [ hide, setHide ] = useState(true)\n  const [ run, setRun ] = useState(true)\n\n  const { token=\"\" } = loginState\n\n  const addFriend = async () => {\n    const result = await addUser(token, friendText)\n    console.log(result)\n    if (result.error != null) {\n      setError(result.error)\n      return\n    }\n\n    if (result == null) {\n      setError(\"Api result invalid\")\n      return\n    }\n    console.log(result)\n    setHide(true)\n    getUser()\n  }\n\n  const onClose = () => {\n    setFriendText(\"\")\n    setError(\"\")\n    setHide(true)\n  }\n\n  // gets user info once\n  if (run) {\n    setRun(false)\n    getUser()\n  }\n\n  if (userState == null) {\n    return <Redirect to={'/app'} />\n  }\n\n  const { user } = userState\n\n  if (user == null) {\n    return (<div>loading</div>)\n  }\n\n  const { friends, username, fullname } = user\n\n  return (\n    <>\n      <Modal\n        show={!hide}\n        onHide={onClose}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Add Friend\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <InputGroup className=\"mb-3\">\n            <FormControl aria-describedby=\"basic-input\"\n              isInvalid={error !== \"\"}\n              value={friendText}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                setFriendText(event.currentTarget.value)\n              }}/>\n            <InputGroup.Append>\n              <Button variant=\"outline-primary\" onClick={() => {addFriend()}}>Add</Button>\n            </InputGroup.Append>\n            <Form.Control.Feedback type=\"invalid\">{error}</Form.Control.Feedback>\n          </InputGroup>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={() => setHide(true)}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n\n      <h5>User Info</h5>\n\n      <ListGroup className=\"mb-3\">\n        <ListGroup.Item>\n          <span className=\"float-left\">\n            <span className=\"text-primary\">{fullname}</span>\n          </span>\n          <span className=\"float-right\">\n            ({username})\n          </span>\n        </ListGroup.Item>\n      </ListGroup>\n\n      <div className=\"align-middle\">\n        <h5 className=\"float-left\">Friends</h5>\n        <span className=\"text-primary float-right\" onClick={() => setHide(false)}>+ Add Friends</span>\n      </div>\n      <br />\n      <h5 />\n\n      <ListGroup className=\"mb-3\">\n        {(friends == null || friends.length <= 0) &&\n          (<ListGroup.Item>\n            <span className=\"text-secondary\">\n              None\n            </span>\n          </ListGroup.Item>)\n        }\n\n        {(friends != null) && friends.map(({\n          username=\"\",\n          fullname=\"\",\n          id=-1\n          }: UserType) => {\n            return (<ListGroup.Item>\n              <span className=\"float-left\">\n                <span className=\"text-primary\">{fullname}</span>\n              </span>\n              <span className=\"float-right\">\n                ({username})\n              </span>\n            </ListGroup.Item>)\n        })}\n      </ListGroup>\n    </>\n  )\n}\n\nexport default connector(PeoplePage)\n","import React, { useState } from 'react'\n\nimport { connect, ConnectedProps } from 'react-redux'\n\nimport {\n  Redirect,\n  Switch,\n  RouteComponentProps\n} from 'react-router-dom'\n\nimport PrivateRoute from './PrivateRoute'\nimport NavComponent from './NavComponent'\n\nimport BalancePage from './BalancePage'\nimport ReceiptPage from './ReceiptPage'\nimport ReceiptEditPage from './ReceiptEditPage'\nimport PeoplePage from './PeoplePage'\n\nimport { getReceiptList, getReceipt } from '../actions/getReceipt'\nimport { getUser } from '../actions/getUser'\n\nimport './App.css'\n\nconst connector = connect(\n  null,\n  { getReceipt, getReceiptList, getUser }\n)\n\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & RouteComponentProps<{}>\n\nconst App = (props: Props) => {\n  const { match, getUser, getReceipt, getReceiptList } = props\n\n  const [ run, setRun ] = useState(true)\n\n  // gets user info once\n  if (run) {\n    setRun(false)\n    getUser()\n  }\n\n  return (\n    <>\n      <NavComponent {...props}/>\n\n      <div className=\"container pt-3 h-100\">\n        <Switch>\n          <PrivateRoute path={`${match.path}/balance`} component={BalancePage} />\n\n          <PrivateRoute path={`${match.path}/receipts/edit/:id`} component={ReceiptEditPage} />\n\n          <PrivateRoute path={`${match.path}/receipts`} component={ReceiptPage} />\n\n          <PrivateRoute path={`${match.path}/people`} component={PeoplePage} />\n\n          <Redirect to={`${match.url}/balance`} />\n        </Switch>\n      </div>\n    </>\n  )\n}\n\n          // <PrivateRoute path={`${match.path}/receipts/edit/:id`} component={ReceiptEditPage} />\n          // <PrivateRoute path={`${match.path}/receipts/edit/:id`}\n          //   render={props => <ReceiptEditPage {...props}/>} />\n\n          // <PrivateRoute\n          //   path={`${match.path}/receipts/edit/:id`}\n          //   render={(props) => {\n          //     getReceipt({id: props.match.params.id})\n          //     return <Redirect to={`${match.path}/receipts/edit`}/>\n          //   }} />\n          // <PrivateRoute\n          //   path={`${match.path}/receipts/list`}\n\n          //   render={() => {\n          //     getReceiptList()\n          //     return <Redirect to={`${match.path}/receipts`}/>\n          //   }} />\n\n\nexport default connector(App)\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { LoginState } from '../types/index'\n\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport './Login.css'\n\nimport {\n  Redirect\n} from 'react-router-dom'\n\nimport { setLogin } from '../actions/setLogin'\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n\nconst mapStateToProps = (state: any) => {\n  return state\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { setLogin }\n)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n  loginState: LoginState\n}\n\nconst LoginPage = ({ loginState, setLogin }: Props) => {\n  const { login }: LoginState = loginState;\n\n  // const [ loginData, setLoginData ] = useState({\n  //   username: \"\",\n  //   password: \"\"\n  // })\n\n  if (login) {\n    return <Redirect to={'/app'} />\n  }\n\n  let loginData = {\n    username: \"\",\n    password: \"\"\n  }\n\n  const handleLoginClick = () => {\n    setLogin(loginData)\n  }\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      setLogin(loginData)\n    }\n  }\n\n  return (\n    <div className=\"login-container\">\n      <Card>\n        <Card.Body>\n          <Card.Title>Login</Card.Title>\n\n          <Form>\n            <Form.Group controlId=\"formUsername\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Username\"\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  loginData = {\n                    username: event.currentTarget.value,\n                    password: loginData.password\n                  }\n                }} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                onKeyPress={handleKeyPress}\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  loginData = {\n                    username: loginData.username,\n                    password: event.currentTarget.value\n                  }\n                }} />\n            </Form.Group>\n\n            <span>\n              <Button onClick={handleLoginClick} className=\"float-left\">\n                Login\n              </Button>\n\n              <LinkContainer to={`/signup`} className=\"float-right\">\n                <Button>Signup</Button>\n              </LinkContainer>\n            </span>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nexport default connector(LoginPage)\n","import { Dispatch } from 'redux';\n\nimport { LoginData, LoginAction } from '../types/index'\n\nexport const setLogin = (payload: LoginData) => (dispatch: Dispatch) => {\n  const loginAction: LoginAction = {\n    type: 'LOGIN_REQUEST',\n    payload\n  }\n\n  dispatch(loginAction)\n}\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { LoginState, SignupState, SignupData } from '../types/index'\n\nimport './Login.css'\n\nimport {\n  Redirect\n} from 'react-router-dom'\n\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport { setSignup } from '../actions/setSignup'\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype AppState = {\n  loginState: LoginState\n  signupState: SignupState\n}\n\ntype Props = PropsFromRedux & AppState\n\nconst mapStateToProps = (state: any) => {\n  const { loginState, signupState } = state\n  return {\n    loginState,\n    signupState\n  }\n}\n\nconst connector = connect(\n  mapStateToProps,\n  { setSignup }\n)\n\nconst SignupPage = ({ signupState, setSignup, loginState }: Props) => {\n  const { login }: LoginState = loginState;\n\n  if (login) {\n    return <Redirect to={'/app'} />\n  }\n\n  let signupData: SignupData = {\n    username: \"\",\n    password: \"\",\n    fullname: \"\"\n  }\n\n  const handleSignupClick = () => {\n    console.log(signupData)\n    setSignup(signupData)\n  }\n\n  return (\n    <div className=\"login-container\">\n      <Card>\n        <Card.Body>\n          <Card.Title>Signup</Card.Title>\n\n          <Form>\n            <Form.Group controlId=\"formUsername\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Username\"\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  signupData = {\n                    username: event.currentTarget.value,\n                    fullname: signupData.fullname,\n                    password: signupData.password\n                  }\n                }} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formFullname\">\n              <Form.Label>Full Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Full Name\"\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  signupData = {\n                    username: signupData.username,\n                    fullname: event.currentTarget.value,\n                    password: signupData.password\n                  }\n                }} />\n            </Form.Group>\n\n            <Form.Group controlId=\"formPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                  signupData = {\n                    username: signupData.username,\n                    fullname: signupData.fullname,\n                    password: event.currentTarget.value\n                  }\n                }} />\n            </Form.Group>\n\n            <span>\n              <LinkContainer to={`/login`} className=\"float-left\">\n                <Button>Login</Button>\n              </LinkContainer>\n\n              <Button onClick={handleSignupClick} className=\"float-right\">\n                Signup\n              </Button>\n\n            </span>\n          </Form>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nexport default connector(SignupPage)\n","import { Dispatch } from 'redux';\n\nimport { SignupData, SignupAction } from '../types/index'\n\nexport const setSignup = (payload: SignupData) => (dispatch: Dispatch) => {\n  console.log(payload)\n  const signupAction: SignupAction = {\n    type: 'SIGNUP_REQUEST',\n    payload\n  }\n\n  dispatch(signupAction)\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport {\n  HashRouter,\n  Redirect,\n  Route\n} from 'react-router-dom';\n\nimport configureStore from './store';\nimport './index.css';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport Login from './components/LoginPage';\nimport Signup from './components/SignupPage';\nimport PrivateRoute from './components/PrivateRoute'\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <HashRouter>\n      <PrivateRoute exact path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <PrivateRoute path=\"/app\" component={App} />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer, RootState } from './reducers/rootReducer';\n\nimport createSagaMiddleware from 'redux-saga'\n\nimport { loginSaga } from './sagas/loginSaga'\nimport { signupSaga } from './sagas/signupSaga'\nimport { receiptListSaga } from './sagas/receiptListSaga'\nimport { receiptSaga } from './sagas/receiptSaga'\nimport { userSaga } from './sagas/userSaga'\nimport { saveReceiptSaga } from './sagas/saveReceiptSaga'\n\nexport default function configureStore() {\n  const sagaMiddleware = createSagaMiddleware()\n\n  const store = createStore(\n    rootReducer,\n    applyMiddleware(thunk, sagaMiddleware),\n  );\n\n  sagaMiddleware.run(loginSaga)\n  sagaMiddleware.run(signupSaga)\n  sagaMiddleware.run(receiptListSaga)\n  sagaMiddleware.run(receiptSaga)\n  sagaMiddleware.run(userSaga)\n  sagaMiddleware.run(saveReceiptSaga)\n\n  return store\n}\n"],"sourceRoot":""}